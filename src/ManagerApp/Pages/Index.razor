@page "/"
@using Common.Models
@using FileHelpers;
@using ManagerApp.Models
@using System.Text
@using ManagerApp.Services
@using static ManagerApp.Utils.Enums

@inject IJSRuntime JS
@inject HttpClient _HttpCLient
@inject Blazored.LocalStorage.ILocalStorageService _LocalStorage
<PageTitle>Index</PageTitle>

<h1>Rudimental crypto tax calculator</h1>

@if (_localStorageInUse)
{
    <HxButton Text="Clear local storage" OnClick="@(async () => await ClearLocalStorage())" Color="ThemeColor.Danger" />
}

@if (!inTaxMode)
{
    <div class="row mb-3">
        <div class="col-12">
            <label for="formFile" class="form-label">Import CSV transactions</label>
            <InputFile OnChange="UploadFile" class="form-control" id="formFile"></InputFile>
        </div>
    </div>
    <div class="row mb-3">

        <div class="col-12">
            <HxModal @ref="recordAddModal" Title="@($"Transaction Management {(!isEditMode?" (add)":"(edit)")}")" Backdrop="ModalBackdrop.Static" Centered="true" Size="ModalSize.Large" Scrollable="true">
                <BodyTemplate>                   
                    <EditForm Model="@newDataItem" OnValidSubmit="@HandleValidSubmit">
                        <div class="row mb-3">

                            <div class="col-4">
                                <label for="tradeaction" class="form-label">Trade Action</label>
                                <select id="tradeaction" class="form-select" @onchange="@SetTradeAction">
                                    <option selected>Choose...</option>
                                    @foreach (var item in @Enum.GetNames(typeof(TradeAction)).ToList())
                                    {
                                        <option @bind="@newDataItem.TransactionType">@item</option>
                                    }

                                </select>

                            </div>
                            <div class="col-4">
                                <label for="assettype" class="form-label">Asset Type</label>
                                <select id="assettype" class="form-select">
                                    <option selected>Choose...</option>
                                    @foreach (var item in @Enum.GetNames(typeof(TradeType)).ToList())
                                    {
                                        <option @bind="@newDataItem.AssetType">@item</option>
                                    }

                                </select>
                            </div>
                            <div class="col-4">
                                <label for="txdate" class="form-label">Date</label>
                                <input id="txdate" @bind="@newDataItem.TransactionDate" class="form-control" type="date" placeholder="yyyy-mm-dd" />
                            </div>
                        </div>
                        @if (selectedTradeAction != TradeAction.unstake)
                        {

                            <div class="row mb-3">
                                @if (!string.IsNullOrWhiteSpace(InName))
                                {
                                    <div class="col-6">
                                        <label for="amountin" class="form-label">@InName</label>
                                        <input type="number" class="form-control" id="amountin" @bind="@newDataItem.AmountIn">
                                    </div>
                                }
                                @if (!string.IsNullOrWhiteSpace(InCurrency))
                                {
                                    <div class="col-6">
                                        <label for="currencyin" class="form-label">@InCurrency</label>
                                        <input type="text" class="form-control" id="currencyin" @bind="@newDataItem.CurrencyIn">
                                    </div>
                                }
                            </div>
                        }
                        @if (selectedTradeAction != TradeAction.buy || selectedTradeAction != TradeAction.stake)
                        {
                            <div class="row mb-3">
                                @if (!string.IsNullOrWhiteSpace(OutName))
                                {
                                    <div class="col-6">
                                        <label for="amountout" class="form-label">@OutName</label>
                                        <input type="number" class="form-control" id="amountout" @bind="@newDataItem.AmountOut">
                                    </div>
                                }
                                @if (!string.IsNullOrWhiteSpace(OutCurrency))
                                {
                                    <div class="col-6">
                                        <label for="currencyout" class="form-label">@OutCurrency</label>
                                        <input type="text" class="form-control" id="currencyout" @bind="@newDataItem.CurrencyOut">
                                    </div>
                                }
                            </div>
                        }


                        <div class="row mb-3">
                            <div class="col-6">
                                <HxSubmit Color="ThemeColor.Primary">Save</HxSubmit>
                            </div>
                            <div class="col-6">
                                <HxButton Text="Cancel" OnClick="@(async() => await recordAddModal.HideAsync())" Color="ThemeColor.Danger" />
                            </div>
                        </div>
                    </EditForm>
                </BodyTemplate>

            </HxModal>
            <HxGrid SelectedDataItem="selectedDataItem"
                SelectedDataItemChanged="HandleSelectedDataItemChanged"
                TItem="CryptoTransactionRecordImport"
                Responsive="true"
                DataProvider="ClientSideProcessingDataProvider"
                PageSize="50"
                HeaderRowCssClass="small"
                ItemRowCssClass="small"
                @ref="recordsToImportGrid">
                <Columns>
                    <HxGridColumn TItem="CryptoTransactionRecordImport" HeaderText="Trade" SortKeySelector="@(item => item.TransactionType)" IsDefaultSortColumn="false">
                        <ItemTemplate Context="item">
                            @if (selectedDataItem == item)
                            {
                                <HxSelect TItem="string" TValue="string" Data="@Enum.GetNames(typeof(TradeAction)).ToList()" @bind-Value="@item.TransactionType" TextSelector="@(p => p)" ValueSelector="@(p => p)" Nullable="true" NullText="-select name-" NullDataText="Loading..." />
                            }
                            else
                            {
                                <div>@item.TransactionType</div>
                            }
                        </ItemTemplate>
                    </HxGridColumn>
                    <HxGridColumn TItem="CryptoTransactionRecordImport" HeaderText="Type" SortKeySelector="@(item => item.AssetType)" IsDefaultSortColumn="false">
                        <ItemTemplate Context="item">
                            @if (selectedDataItem == item)
                            {
                                <HxSelect TItem="string" TValue="string" Data="@Enum.GetNames(typeof(TradeType)).ToList()" @bind-Value="@item.AssetType" TextSelector="@(p => p)" ValueSelector="@(p => p)" Nullable="true" NullText="-select name-" NullDataText="Loading..." />
                            }
                            else
                            {
                                <div>@item.AssetType</div>
                            }
                        </ItemTemplate>
                    </HxGridColumn>
                    <HxGridColumn TItem="CryptoTransactionRecordImport" HeaderText="Date" SortKeySelector="@(item => item.TransactionDate)" IsDefaultSortColumn="true">
                        <ItemTemplate Context="item">
                            @if (selectedDataItem == item)
                            {
                                <input @bind="@selectedDataItem.TransactionDate" class="form-control" type="date" placeholder="yyyy-mm-dd" />


                            }
                            else
                            {
                                <div>@item.TransactionDate.ToString("d")</div>
                            }
                        </ItemTemplate>
                    </HxGridColumn>

                    <HxGridColumn TItem="CryptoTransactionRecordImport" HeaderText="Amount" SortKeySelector="@(item => item.AmountIn)" IsDefaultSortColumn="false">
                        <ItemTemplate Context="item">
                            @if (selectedDataItem == item)
                            {

                                <input @bind="@selectedDataItem.AmountIn" class="form-control" type="number" />


                            }
                            else
                            {
                                <div>@item.AmountIn.ToString()</div>
                            }
                        </ItemTemplate>
                    </HxGridColumn>
                    <HxGridColumn TItem="CryptoTransactionRecordImport" HeaderText="Currency (in)" SortKeySelector="@(item => item.CurrencyIn)" IsDefaultSortColumn="false">
                        <ItemTemplate Context="item">
                            @if (selectedDataItem == item)
                            {

                                <input @bind="@selectedDataItem.CurrencyIn" class="form-control" type="text" />



                            }
                            else
                            {
                                <div>@item.CurrencyIn</div>
                            }
                        </ItemTemplate>
                    </HxGridColumn>

                    <HxGridColumn TItem="CryptoTransactionRecordImport" HeaderText="Amount" SortKeySelector="@(item => item.AmountOut)" IsDefaultSortColumn="false">
                        <ItemTemplate Context="item">
                            @if (selectedDataItem == item)
                            {

                                <input @bind="@selectedDataItem.AmountOut" class="form-control" type="number" />


                            }
                            else
                            {
                                <div>@item.AmountOut.ToString()</div>
                            }
                        </ItemTemplate>
                    </HxGridColumn>
                    <HxGridColumn TItem="CryptoTransactionRecordImport" HeaderText="Currency (out)" SortKeySelector="@(item => item.CurrencyOut)" IsDefaultSortColumn="false">
                        <ItemTemplate Context="item">
                            @if (selectedDataItem == item)
                            {

                                <input @bind="@selectedDataItem.CurrencyOut" class="form-control" type="text" />



                            }
                            else
                            {
                                <div>@item.CurrencyOut</div>
                            }
                        </ItemTemplate>
                    </HxGridColumn>


                    <HxContextMenuGridColumn TItem="CryptoTransactionRecordImport" Context="item">
                        <HxContextMenu>
                            <HxContextMenuItem Text="Delete" Icon="BootstrapIcon.Trash" OnClick="() => DeleteItem(item)" />
                        </HxContextMenu>
                    </HxContextMenuGridColumn>
                </Columns>
            </HxGrid>
            <HxButton Icon="@BootstrapIcon.PlusCircle" IconPlacement="ButtonIconPlacement.End" Text="Add" OnClick="@(async () =>  {isEditMode = false;await recordAddModal.ShowAsync();})"></HxButton>
            <HxButton Icon="@BootstrapIcon.LightningCharge" IconPlacement="ButtonIconPlacement.End" Text="Taxify" OnClick="@CreateTaxRecords"></HxButton>

        </div>
    </div>
}
else
{
    <HxGrid SelectedDataItem="selectedTaxDataItem"
        SelectedDataItemChanged="HandleSelectedTaxDataItemChanged"
        TItem="CryptoTransactionRecord"
        Responsive="true"
        DataProvider="ClientSideProcessingTaxDataProvider"
        PageSize="50"
        HeaderRowCssClass="small"
        ItemRowCssClass="small"
        @ref="taxRecordGrid">
        <Columns>
            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="#" SortKeySelector="@(item => item.Sequence)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {
                        <input @bind="@selectedTaxDataItem.Sequence" class="form-control" type="number" />
                    }
                    else
                    {
                        <div>@item.Sequence</div>
                    }
                </ItemTemplate>
            </HxGridColumn>
            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Date" SortKeySelector="@(item => item.TransactionDate)" IsDefaultSortColumn="true">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {
                        <input @bind="@selectedTaxDataItem.TransactionDate" class="form-control" type="date" placeholder="yyyy-mm-dd" />


                    }
                    else
                    {
                        <div>@item.TransactionDate.ToString("d")</div>
                    }
                </ItemTemplate>
            </HxGridColumn>
            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Trade" SortKeySelector="@(item => item.TransactionType)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {
                        <HxSelect TItem="string" TValue="string" Data="@Enum.GetNames(typeof(TradeAction)).ToList()" @bind-Value="@item.TransactionType" TextSelector="@(p => p)" ValueSelector="@(p => p)" Nullable="true" NullText="-select name-" NullDataText="Loading..." />
                    }
                    else
                    {
                        <div>@item.TransactionType</div>
                    }
                </ItemTemplate>
            </HxGridColumn>
            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Taxable" SortKeySelector="@(item => item.TaxableEvent)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {
                        <input @bind="@selectedTaxDataItem.TaxableEvent" class="form-control" type="checkbox" />
                    }
                    else
                    {
                        <div>@(item.TaxableEvent ? "YES" : "NO")</div>
                    }
                </ItemTemplate>
            </HxGridColumn>


            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Amount" SortKeySelector="@(item => item.Amount)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {

                        <input @bind="@selectedTaxDataItem.Amount" class="form-control" type="number" />


                    }
                    else
                    {
                        <div>@item.Amount.ToString()</div>
                    }
                </ItemTemplate>
            </HxGridColumn>

            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Asset" SortKeySelector="@(item => item.AmountAssetType)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {

                        <input @bind="@selectedTaxDataItem.AmountAssetType" class="form-control" type="text" />



                    }
                    else
                    {
                        <div>@item.AmountAssetType</div>
                    }
                </ItemTemplate>
            </HxGridColumn>

            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Ex.Rate" SortKeySelector="@(item => item.ExchangeRateValue)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {

                        <input @bind="@selectedTaxDataItem.ExchangeRateValue" class="form-control" type="number" />


                    }
                    else
                    {
                        <div>@item.ExchangeRateValue.ToString()</div>
                    }
                </ItemTemplate>
            </HxGridColumn>

            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Currency" SortKeySelector="@(item => item.ExchangeRateCurrency)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {

                        <input @bind="@selectedTaxDataItem.ExchangeRateCurrency" class="form-control" type="text" />



                    }
                    else
                    {
                        <div>@item.ExchangeRateCurrency</div>
                    }
                </ItemTemplate>
            </HxGridColumn>



            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Value" SortKeySelector="@(item => item.Value)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {

                        <input @bind="@selectedTaxDataItem.Value" class="form-control" type="number" />


                    }
                    else
                    {
                        <div>@item.Value.ToString()</div>
                    }
                </ItemTemplate>
            </HxGridColumn>

            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Value in" SortKeySelector="@(item => item.ValueAssetType)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {

                        <input @bind="@selectedTaxDataItem.ValueAssetType" class="form-control" type="text" />



                    }
                    else
                    {
                        <div>@item.ValueAssetType</div>
                    }
                </ItemTemplate>
            </HxGridColumn>

            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Is NFT" SortKeySelector="@(item => item.IsNFT)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {
                        <input @bind="@selectedTaxDataItem.IsNFT" class="form-control" type="checkbox" />
                    }
                    else
                    {
                        <div>@(item.IsNFT ? "YES" : "NO")</div>
                    }
                </ItemTemplate>
            </HxGridColumn>

            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Ex.Rate provided" SortKeySelector="@(item => item.UsesManualAssignedExchangeRate)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {
                        <input @bind="@selectedTaxDataItem.UsesManualAssignedExchangeRate" class="form-control" type="checkbox" />
                    }
                    else
                    {
                        <div>@(item.UsesManualAssignedExchangeRate ? "YES" : "NO")</div>
                    }
                </ItemTemplate>
            </HxGridColumn>

            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Notes" SortKeySelector="@(item => item.InternalNotes)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {
                        <textarea rows="4" cols="50" @bind="@selectedTaxDataItem.InternalNotes" class="form-control" />

                    }
                    else
                    {
                        <div>@item.InternalNotes</div>
                    }
                </ItemTemplate>
            </HxGridColumn>

        </Columns>
    </HxGrid>
    <HxButton Icon="@BootstrapIcon.Book" IconPlacement="ButtonIconPlacement.End" Size="ButtonSize.Small" Text="(re)import transactions" CssClass="btn btn-outline-info mb-3 p-2" OnClick="@(async () =>  {inTaxMode = false;StateHasChanged();})"></HxButton>

        <HxButton Icon="@BootstrapIcon.Save2" IconPlacement="ButtonIconPlacement.End" Size="ButtonSize.Small" Text="Save crypto transaction records" CssClass="btn btn-outline-info mb-3 p-2" OnClick="@(async ()=> {await ExportCryptoTransactionRecord();})"></HxButton>

    <HxDropdownButtonGroup Split="true">
        <HxButton Icon="@BootstrapIcon.Calculator" IconPlacement="ButtonIconPlacement.Start" CssClass="btn btn-outline-success mb-3" Size="ButtonSize.Small" OnClick="@(()=> {InitializeCryptoCollection(0);})">Create Tax Reports</HxButton>
        <HxDropdownToggleButton CssClass="btn btn-outline-success mb-3" Size="ButtonSize.Small">
            <span class="visually-hidden">Select tax year</span>@* OPTIONAL (for accessibility) *@
        </HxDropdownToggleButton>
        <HxDropdownMenu>    
            @foreach(var year in TaxYears)
            {
            <HxDropdownItem OnClick="@(()=> {InitializeCryptoCollection(year);})">@year</HxDropdownItem>
            }
  
        </HxDropdownMenu>
    </HxDropdownButtonGroup>
   @* 
    <HxButton Icon="@BootstrapIcon.Calculator" IconPlacement="ButtonIconPlacement.End" Size="ButtonSize.Small" Text="Create Tax Reports" CssClass="btn btn-outline-success mb-3" OnClick="InitializeCryptoCollection"></HxButton>
*@
    if (TaxRecords is not null && TaxRecords.Count > 0)
    {
        

        <table class="table table-sm table-dark">
            <thead>
                <tr>
                    
                    <th scope="col">Name</th>
                    <th scope="col">Sell amount</th>
                    <th scope="col">Buy Date</th>
                    <th scope="col">Buy price</th>
                    <th scope="col">Sell Date</th>
                    <th scope="col">Sell price</th>
                    <th scope="col">Currency</th>
                    <th scope="col">Capital Gains</th>
                    <th scope="col">Calculation</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var record in TaxRecords)
                {
                <tr>
                    
                    <th scope="row">@record.Name</th>
                    <td>@record.SellAmount</td>
                      <td>@record.BoughtDate</td>
                    <td>@record.BuyPrice</td>
                     <td>@record.SellDate</td>
                    <td>@record.SellPrice</td>
                    <td>@record.Currency</td>
                    <td>@record.CapitalGainAmount</td>
                     <td>@record.Calculation</td>
                </tr>
                }              
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="8">
                        <HxButton Icon="@BootstrapIcon.Pen" IconPlacement="ButtonIconPlacement.Start" CssClass="btn btn-outline-success mb-3" Size="ButtonSize.Small" OnClick="@(async ()=> {await ExportRecords(TaxRecords);})">Export Tax Reports</HxButton>
                        </td>
                </tr>
            </tfoot>
        </table>
    }

@*    @if(TaxTransactions is not null && TaxTransactions.Count() > 0)
    {
        <ul class="list-unstyled">
        @foreach (var item in TaxTransactions)
        {
            <li><small>@item</small></li>
        }
        </ul>
    }*@
    @if (portofolios is not null && portofolios.Count > 0)
    {
          <div class="row mb-3">
            @foreach (var collection in portofolios)
            {
                <div class="col-12">
                    <HxCard>
                        <BodyTemplate>
                            <HxCardTitle>@collection.Token</HxCardTitle>
                            <HxCardSubtitle CssClass="mb-2 text-muted">@collection.LastUpdated.ToString("dddd, dd MMMM yyyy")</HxCardSubtitle>
                            <HxCardText>
                                <div class="row">
                                    <div class="col-auto">
 @($"{collection.Amount} {collection.Token} available @ {collection.InvestmentValue.ToString("N2")} {collection.InvestmentValueCurrency}")
                                    </div>
                                </div>
                            @*     <div class="row mt-1">
                                    <div class="col-auto">
                                        <table class="table table-sm table-light">
                                            <thead>
                                                <tr>
                                                     <th scope="col">Name</th>
                                                    <th scope="col">Sell amount</th>
                                                    <th scope="col">Buy Date</th>
                                                    <th scope="col">Buy price</th>
                                                    <th scope="col">Sell Date</th>
                                                    <th scope="col">Sell price</th>
                                                    <th scope="col">Currency</th>
                                                    <th scope="col">Capital Gains</th>
                                                    <th scope="col">Calculation</th>

                                                </tr>
                                            </thead>
                                            <tbody>
                                                @if (collection.RecordedTransactions is not null && collection.RecordedTransactions.Count > 0)
                                                {
                                                    @foreach (var record in collection.RecordedTransactions)
                                                    {
                                                        <tr>
                                                            <th scope="row">@record.Name</th>                                                           
                                                            <td>@record.SellAmount</td>
                                                            <td>@record.BoughtDate</td>
                                                            <td>@record.BuyPrice</td>
                                                            <td>@record.SellDate</td>
                                                            <td>@record.SellPrice</td>
                                                            <td>@record.Currency</td>
                                                            <td>@record.CapitalGainAmount</td>
                                                            <td>@record.Calculation</td>
                                                        </tr>
                                                    }
                                                }
                                            </tbody>

                                        </table>
                                         
                                      
                                      
                                    </div>
                                </div> *@
                            </HxCardText>
                                
                        </BodyTemplate>
                        </HxCard>
                    </div>
            }
        </div>
    }

@*    @if (myCryptoCollection is not null && myCryptoCollection.Count > 0)
    {
        <div class="row mb-3">
            @foreach (var collection in myCryptoCollection)
            {
                <div class="col-3">
                    <HxCard>
                        <BodyTemplate>
                            <HxCardTitle>@collection.Name</HxCardTitle>
                            <HxCardSubtitle CssClass="mb-2 text-muted">@collection.CreatedOn.ToString("dddd, dd MMMM yyyy")</HxCardSubtitle>
                            <HxCardText>@($"{collection.Available} {collection.Name} available @ {collection.BoughtAt} {collection.Currency}")</HxCardText>
                            </BodyTemplate>
                        </HxCard>
                    </div>
            }
        </div>
    }*@

}

@* @if (_showLoader)
{
    <div class="mb-3">
        <div style="display:grid;place-items:center;margin-top:10%">
            <span class="loader">Processing, please wait...</span>
        </div>
        <div class="alert alert-info" role="alert">
            <h3>Information</h3>
            <p>
                @_progressMessage
            </p>
        </div>
    </div>
} *@


