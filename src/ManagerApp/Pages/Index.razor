@page "/"
@using Common.Models
@using FileHelpers;
@using ManagerApp.Models
@using System.Text
@using ManagerApp.Services
@using static ManagerApp.Utils.Enums

@inject IJSRuntime JS
@inject HttpClient _HttpCLient
<PageTitle>Index</PageTitle>

<h1>Rudimental crypto tax calculator</h1>
@if (_showLoader)
{
    <div class="mb-3">
        <div style="display:grid;place-items:center;margin-top:10%">
            <span class="loader">Processing, please wait...</span>
        </div>
    </div>
}

@if (!inTaxMode)
{
    <div class="row mb-3">
        <div class="col-12">
            <label for="formFile" class="form-label">Import CSV transactions</label>
            <InputFile OnChange="UploadFile" class="form-control" id="formFile"></InputFile>
        </div>
    </div>
    <div class="row mb-3">

        <div class="col-12">
            <HxModal @ref="recordAddModal" Title="@($"Transaction Management {(!isEditMode?" (add)":"(edit)")}")" Backdrop="ModalBackdrop.Static" Centered="true" Size="ModalSize.Large" Scrollable="true">
                <BodyTemplate>                   
                    <EditForm Model="@newDataItem" OnValidSubmit="@HandleValidSubmit">
                        <div class="row mb-3">

                            <div class="col-4">
                                <label for="tradeaction" class="form-label">Trade Action</label>
                                <select id="tradeaction" class="form-select" @onchange="@SetTradeAction">
                                    <option selected>Choose...</option>
                                    @foreach (var item in @Enum.GetNames(typeof(TradeAction)).ToList())
                                    {
                                        <option @bind="@newDataItem.TransactionType">@item</option>
                                    }

                                </select>

                            </div>
                            <div class="col-4">
                                <label for="assettype" class="form-label">Asset Type</label>
                                <select id="assettype" class="form-select">
                                    <option selected>Choose...</option>
                                    @foreach (var item in @Enum.GetNames(typeof(TradeType)).ToList())
                                    {
                                        <option @bind="@newDataItem.AssetType">@item</option>
                                    }

                                </select>
                            </div>
                            <div class="col-4">
                                <label for="txdate" class="form-label">Date</label>
                                <input id="txdate" @bind="@newDataItem.TransactionDate" class="form-control" type="date" placeholder="yyyy-mm-dd" />
                            </div>
                        </div>
                        @if (selectedTradeAction != TradeAction.unstake)
                        {

                            <div class="row mb-3">
                                @if (!string.IsNullOrWhiteSpace(InName))
                                {
                                    <div class="col-6">
                                        <label for="amountin" class="form-label">@InName</label>
                                        <input type="number" class="form-control" id="amountin" @bind="@newDataItem.AmountIn">
                                    </div>
                                }
                                @if (!string.IsNullOrWhiteSpace(InCurrency))
                                {
                                    <div class="col-6">
                                        <label for="currencyin" class="form-label">@InCurrency</label>
                                        <input type="text" class="form-control" id="currencyin" @bind="@newDataItem.CurrencyIn">
                                    </div>
                                }
                            </div>
                        }
                        @if (selectedTradeAction != TradeAction.buy || selectedTradeAction != TradeAction.stake)
                        {
                            <div class="row mb-3">
                                @if (!string.IsNullOrWhiteSpace(OutName))
                                {
                                    <div class="col-6">
                                        <label for="amountout" class="form-label">@OutName</label>
                                        <input type="number" class="form-control" id="amountout" @bind="@newDataItem.AmountOut">
                                    </div>
                                }
                                @if (!string.IsNullOrWhiteSpace(OutCurrency))
                                {
                                    <div class="col-6">
                                        <label for="currencyout" class="form-label">@OutCurrency</label>
                                        <input type="text" class="form-control" id="currencyout" @bind="@newDataItem.CurrencyOut">
                                    </div>
                                }
                            </div>
                        }


                        <div class="row mb-3">
                            <div class="col-6">
                                <HxSubmit Color="ThemeColor.Primary">Save</HxSubmit>
                            </div>
                            <div class="col-6">
                                <HxButton Text="Cancel" OnClick="@(async() => await recordAddModal.HideAsync())" Color="ThemeColor.Danger" />
                            </div>
                        </div>
                    </EditForm>
                </BodyTemplate>

            </HxModal>
            <HxGrid SelectedDataItem="selectedDataItem"
                SelectedDataItemChanged="HandleSelectedDataItemChanged"
                TItem="CryptoTransactionRecordImport"
                Responsive="true"
                DataProvider="ClientSideProcessingDataProvider"
                PageSize="50"
                HeaderRowCssClass="small"
                ItemRowCssClass="small"
                @ref="recordsToImportGrid">
                <Columns>
                    <HxGridColumn TItem="CryptoTransactionRecordImport" HeaderText="Trade" SortKeySelector="@(item => item.TransactionType)" IsDefaultSortColumn="false">
                        <ItemTemplate Context="item">
                            @if (selectedDataItem == item)
                            {
                                <HxSelect TItem="string" TValue="string" Data="@Enum.GetNames(typeof(TradeAction)).ToList()" @bind-Value="@item.TransactionType" TextSelector="@(p => p)" ValueSelector="@(p => p)" Nullable="true" NullText="-select name-" NullDataText="Loading..." />
                            }
                            else
                            {
                                <div>@item.TransactionType</div>
                            }
                        </ItemTemplate>
                    </HxGridColumn>
                    <HxGridColumn TItem="CryptoTransactionRecordImport" HeaderText="Type" SortKeySelector="@(item => item.AssetType)" IsDefaultSortColumn="false">
                        <ItemTemplate Context="item">
                            @if (selectedDataItem == item)
                            {
                                <HxSelect TItem="string" TValue="string" Data="@Enum.GetNames(typeof(TradeType)).ToList()" @bind-Value="@item.AssetType" TextSelector="@(p => p)" ValueSelector="@(p => p)" Nullable="true" NullText="-select name-" NullDataText="Loading..." />
                            }
                            else
                            {
                                <div>@item.AssetType</div>
                            }
                        </ItemTemplate>
                    </HxGridColumn>
                    <HxGridColumn TItem="CryptoTransactionRecordImport" HeaderText="Date" SortKeySelector="@(item => item.TransactionDate)" IsDefaultSortColumn="true">
                        <ItemTemplate Context="item">
                            @if (selectedDataItem == item)
                            {
                                <input @bind="@selectedDataItem.TransactionDate" class="form-control" type="date" placeholder="yyyy-mm-dd" />


                            }
                            else
                            {
                                <div>@item.TransactionDate.ToString("d")</div>
                            }
                        </ItemTemplate>
                    </HxGridColumn>

                    <HxGridColumn TItem="CryptoTransactionRecordImport" HeaderText="Amount" SortKeySelector="@(item => item.AmountIn)" IsDefaultSortColumn="false">
                        <ItemTemplate Context="item">
                            @if (selectedDataItem == item)
                            {

                                <input @bind="@selectedDataItem.AmountIn" class="form-control" type="number" />


                            }
                            else
                            {
                                <div>@item.AmountIn.ToString()</div>
                            }
                        </ItemTemplate>
                    </HxGridColumn>
                    <HxGridColumn TItem="CryptoTransactionRecordImport" HeaderText="Currency (in)" SortKeySelector="@(item => item.CurrencyIn)" IsDefaultSortColumn="false">
                        <ItemTemplate Context="item">
                            @if (selectedDataItem == item)
                            {

                                <input @bind="@selectedDataItem.CurrencyIn" class="form-control" type="text" />



                            }
                            else
                            {
                                <div>@item.CurrencyIn</div>
                            }
                        </ItemTemplate>
                    </HxGridColumn>

                    <HxGridColumn TItem="CryptoTransactionRecordImport" HeaderText="Amount" SortKeySelector="@(item => item.AmountOut)" IsDefaultSortColumn="false">
                        <ItemTemplate Context="item">
                            @if (selectedDataItem == item)
                            {

                                <input @bind="@selectedDataItem.AmountOut" class="form-control" type="number" />


                            }
                            else
                            {
                                <div>@item.AmountOut.ToString()</div>
                            }
                        </ItemTemplate>
                    </HxGridColumn>
                    <HxGridColumn TItem="CryptoTransactionRecordImport" HeaderText="Currency (out)" SortKeySelector="@(item => item.CurrencyOut)" IsDefaultSortColumn="false">
                        <ItemTemplate Context="item">
                            @if (selectedDataItem == item)
                            {

                                <input @bind="@selectedDataItem.CurrencyOut" class="form-control" type="text" />



                            }
                            else
                            {
                                <div>@item.CurrencyOut</div>
                            }
                        </ItemTemplate>
                    </HxGridColumn>


                    <HxContextMenuGridColumn TItem="CryptoTransactionRecordImport" Context="item">
                        <HxContextMenu>
                            <HxContextMenuItem Text="Delete" Icon="BootstrapIcon.Trash" OnClick="() => DeleteItem(item)" />
                        </HxContextMenu>
                    </HxContextMenuGridColumn>
                </Columns>
            </HxGrid>
            <HxButton Icon="@BootstrapIcon.PlusCircle" IconPlacement="ButtonIconPlacement.End" Text="Add" OnClick="@(async () =>  {isEditMode = false;await recordAddModal.ShowAsync();})"></HxButton>
            <HxButton Icon="@BootstrapIcon.LightningCharge" IconPlacement="ButtonIconPlacement.End" Text="Taxify" OnClick="@CreateTaxRecords"></HxButton>

        </div>
    </div>
}
else
{
    <HxGrid SelectedDataItem="selectedTaxDataItem"
        SelectedDataItemChanged="HandleSelectedTaxDataItemChanged"
        TItem="CryptoTransactionRecord"
        Responsive="true"
        DataProvider="ClientSideProcessingTaxDataProvider"
        PageSize="50"
        HeaderRowCssClass="small"
        ItemRowCssClass="small"
        @ref="taxRecordGrid">
        <Columns>
            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="#" SortKeySelector="@(item => item.Sequence)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {
                        <input @bind="@selectedTaxDataItem.Sequence" class="form-control" type="number" />
                    }
                    else
                    {
                        <div>@item.Sequence</div>
                    }
                </ItemTemplate>
            </HxGridColumn>
            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Date" SortKeySelector="@(item => item.TransactionDate)" IsDefaultSortColumn="true">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {
                        <input @bind="@selectedTaxDataItem.TransactionDate" class="form-control" type="date" placeholder="yyyy-mm-dd" />


                    }
                    else
                    {
                        <div>@item.TransactionDate.ToString("d")</div>
                    }
                </ItemTemplate>
            </HxGridColumn>
            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Trade" SortKeySelector="@(item => item.TransactionType)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {
                        <HxSelect TItem="string" TValue="string" Data="@Enum.GetNames(typeof(TradeAction)).ToList()" @bind-Value="@item.TransactionType" TextSelector="@(p => p)" ValueSelector="@(p => p)" Nullable="true" NullText="-select name-" NullDataText="Loading..." />
                    }
                    else
                    {
                        <div>@item.TransactionType</div>
                    }
                </ItemTemplate>
            </HxGridColumn>
            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Taxable" SortKeySelector="@(item => item.TaxableEvent)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {
                        <input @bind="@selectedTaxDataItem.TaxableEvent" class="form-control" type="checkbox" />
                    }
                    else
                    {
                        <div>@(item.TaxableEvent ? "YES" : "NO")</div>
                    }
                </ItemTemplate>
            </HxGridColumn>


            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Amount" SortKeySelector="@(item => item.Amount)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {

                        <input @bind="@selectedTaxDataItem.Amount" class="form-control" type="number" />


                    }
                    else
                    {
                        <div>@item.Amount.ToString()</div>
                    }
                </ItemTemplate>
            </HxGridColumn>

            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Asset" SortKeySelector="@(item => item.AmountAssetType)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {

                        <input @bind="@selectedTaxDataItem.AmountAssetType" class="form-control" type="text" />



                    }
                    else
                    {
                        <div>@item.AmountAssetType</div>
                    }
                </ItemTemplate>
            </HxGridColumn>

            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Ex.Rate" SortKeySelector="@(item => item.ExchangeRateValue)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {

                        <input @bind="@selectedTaxDataItem.ExchangeRateValue" class="form-control" type="number" />


                    }
                    else
                    {
                        <div>@item.ExchangeRateValue.ToString()</div>
                    }
                </ItemTemplate>
            </HxGridColumn>

            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Currency" SortKeySelector="@(item => item.ExchangeRateCurrency)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {

                        <input @bind="@selectedTaxDataItem.ExchangeRateCurrency" class="form-control" type="text" />



                    }
                    else
                    {
                        <div>@item.ExchangeRateCurrency</div>
                    }
                </ItemTemplate>
            </HxGridColumn>



            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Value" SortKeySelector="@(item => item.Value)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {

                        <input @bind="@selectedTaxDataItem.Value" class="form-control" type="number" />


                    }
                    else
                    {
                        <div>@item.Value.ToString()</div>
                    }
                </ItemTemplate>
            </HxGridColumn>

            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Value in" SortKeySelector="@(item => item.ValueAssetType)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {

                        <input @bind="@selectedTaxDataItem.ValueAssetType" class="form-control" type="text" />



                    }
                    else
                    {
                        <div>@item.ValueAssetType</div>
                    }
                </ItemTemplate>
            </HxGridColumn>

            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Is NFT" SortKeySelector="@(item => item.IsNFT)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {
                        <input @bind="@selectedTaxDataItem.IsNFT" class="form-control" type="checkbox" />
                    }
                    else
                    {
                        <div>@(item.IsNFT ? "YES" : "NO")</div>
                    }
                </ItemTemplate>
            </HxGridColumn>

            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Ex.Rate provided" SortKeySelector="@(item => item.UsesManualAssignedExchangeRate)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {
                        <input @bind="@selectedTaxDataItem.UsesManualAssignedExchangeRate" class="form-control" type="checkbox" />
                    }
                    else
                    {
                        <div>@(item.UsesManualAssignedExchangeRate ? "YES" : "NO")</div>
                    }
                </ItemTemplate>
            </HxGridColumn>

            <HxGridColumn TItem="CryptoTransactionRecord" HeaderText="Notes" SortKeySelector="@(item => item.InternalNotes)" IsDefaultSortColumn="false">
                <ItemTemplate Context="item">
                    @if (selectedTaxDataItem == item)
                    {
                        <textarea rows="4" cols="50" @bind="@selectedTaxDataItem.InternalNotes" class="form-control" />

                    }
                    else
                    {
                        <div>@item.InternalNotes</div>
                    }
                </ItemTemplate>
            </HxGridColumn>

        </Columns>
    </HxGrid>
    <HxButton Icon="@BootstrapIcon.Book" IconPlacement="ButtonIconPlacement.End" Size="ButtonSize.Small" Text="Import Transactions" CssClass="btn btn-outline-info mb-3" OnClick="@(async () =>  {inTaxMode = false;StateHasChanged();})"></HxButton>

    <HxDropdownButtonGroup Split="true">
        <HxButton Icon="@BootstrapIcon.Calculator" IconPlacement="ButtonIconPlacement.Start" CssClass="btn btn-outline-success mb-3" Size="ButtonSize.Small" OnClick="@(()=> {InitializeCryptoCollection(TaxYears.First());})">Create Tax Reports</HxButton>
        <HxDropdownToggleButton CssClass="btn btn-outline-success mb-3" Size="ButtonSize.Small">
            <span class="visually-hidden">Select tax year</span>@* OPTIONAL (for accessibility) *@
        </HxDropdownToggleButton>
        <HxDropdownMenu>    
            @foreach(var year in TaxYears)
            {
            <HxDropdownItem OnClick="@(()=> {InitializeCryptoCollection(year);})">@year</HxDropdownItem>
            }
  
        </HxDropdownMenu>
    </HxDropdownButtonGroup>
   @* 
    <HxButton Icon="@BootstrapIcon.Calculator" IconPlacement="ButtonIconPlacement.End" Size="ButtonSize.Small" Text="Create Tax Reports" CssClass="btn btn-outline-success mb-3" OnClick="InitializeCryptoCollection"></HxButton>
*@
    if (TaxRecords is not null && TaxRecords.Count > 0)
    {
        

        <table class="table table-sm table-dark">
            <thead>
                <tr>
                    <th scope="col">Date</th>
                    <th scope="col">Name</th>
                    <th scope="col">Sell amount</th>
                    <th scope="col">Buy price</th>
                    <th scope="col">Sell price</th>
                    <th scope="col">Currency</th>
                    <th scope="col">Capital Gains</th>
                    <th scope="col">Calculation</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var record in TaxRecords)
                {
                <tr>
                    <th scope="row">@record.SellDate</th>
                    <td>@record.Name</td>
                    <td>@record.SellAmount</td>
                    <td>@record.BuyPrice</td>
                    <td>@record.SellPrice</td>
                    <td>@record.Currency</td>
                    <td>@record.CapitalGainAmount</td>
                     <td>@record.Calculation</td>
                </tr>
                }              
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="8">
                        <HxButton Icon="@BootstrapIcon.Pen" IconPlacement="ButtonIconPlacement.Start" CssClass="btn btn-outline-success mb-3" Size="ButtonSize.Small" OnClick="@(async ()=> {await ExportRecords(TaxRecords);})">Export Tax Reports</HxButton>
                        </td>
                </tr>
            </tfoot>
        </table>
    }

    @if(TaxTransactions is not null && TaxTransactions.Count() > 0)
    {
        <ul class="list-unstyled">
        @foreach (var item in TaxTransactions)
        {
            <li><small>@item</small></li>
        }
        </ul>
    }

    @if (myCryptoCollection is not null && myCryptoCollection.Count > 0)
    {
        <div class="row mb-3">
            @foreach (var collection in myCryptoCollection)
            {
                <div class="col-3">
                    <HxCard>
                        <BodyTemplate>
                            <HxCardTitle>@collection.Name</HxCardTitle>
                            <HxCardSubtitle CssClass="mb-2 text-muted">@collection.CreatedOn.ToString("dddd, dd MMMM yyyy")</HxCardSubtitle>
                            <HxCardText>@($"{collection.Available} {collection.Name} available @ {collection.BoughtAt} {collection.Currency}")</HxCardText>
                            </BodyTemplate>
                        </HxCard>
                    </div>
            }
        </div>
    }

}




@code {

    private HxGrid<CryptoTransactionRecordImport>? recordsToImportGrid;
    private HxGrid<CryptoTransactionRecord>? taxRecordGrid;
    private HxModal? recordAddModal;
    private bool isEditMode = false;
    private string InName { get; set; } = "Amount (in)";
    private string InCurrency { get; set; } = "Currency (in)";
    private string OutName { get; set; } = "Amount (out)";
    private string OutCurrency { get; set; } = "Currency (out)";
    private bool inTaxMode = false;
    private List<int> TaxYears { get; set; } = new();
    private List<ExchangeRate> allExchangeRates = new();
    private TradeAction selectedTradeAction = TradeAction.not_defined;
    private CryptoTransactionRecordImport selectedDataItem = new();
    private CryptoTransactionRecord selectedTaxDataItem = new();
    private CryptoTransactionRecordImport newDataItem = new();
    private List<CryptoTransactionRecordImport> localEditableDataItem { get; set; } = new();
    private List<CryptoTransactionRecord> localEditableTaxDataItem { get; set; } = new();
    private IEnumerable<string> TradeTypes = Enum.GetNames(typeof(TradeType)).ToList();
    private List<CryptoCollection> myCryptoCollection = new();
    private List<string> TaxTransactions = new();
    private List<CryptoTaxRecords> TaxRecords = new();
    private bool _showLoader = false;

    protected override void OnInitialized()
    {
        int startYear = 2015;
        while(startYear <= DateTime.UtcNow.Year)
        {
            TaxYears.Add(startYear);
            startYear++;
        }
    }

    private async Task SetTradeAction(ChangeEventArgs e)
    {
        var selectedString = e?.Value?.ToString() ?? string.Empty;
        if (!Enum.TryParse<TradeAction>(selectedString, true, out selectedTradeAction))
        {
            selectedTradeAction = TradeAction.not_defined;
        }

        SetCustomLabelNames();

        await InvokeAsync(StateHasChanged);


    }

    private Task<GridDataProviderResult<CryptoTransactionRecordImport>> ClientSideProcessingDataProvider(GridDataProviderRequest<CryptoTransactionRecordImport> request)
    {
        return Task.FromResult(request.ApplyTo(localEditableDataItem));
    }

    private async Task HandleSelectedDataItemChanged(CryptoTransactionRecordImport newSelectedDataItem)
    {
        if (selectedDataItem != null)
        {
            // TODO: add your logic to save item changes here, the item which was selected (edited) is in selectedDataItem
            await Task.Delay(200); // simulates API call (saving changes itself)
            Console.WriteLine("Saving... " + selectedDataItem);
        }

        selectedDataItem = newSelectedDataItem;
    }

    private async void HandleValidSubmit()
    {
        Console.WriteLine("HandleValidSubmit called");

        // Process the valid form
        var newSeq = localEditableDataItem.MaxBy(x => x.Sequence).Sequence + 1;
        newDataItem.Sequence = newSeq;
        localEditableDataItem.Add(newDataItem);
        await recordsToImportGrid.RefreshDataAsync();
        await recordAddModal.HideAsync();
    }

    private Task<GridDataProviderResult<CryptoTransactionRecord>> ClientSideProcessingTaxDataProvider(GridDataProviderRequest<CryptoTransactionRecord> request)
    {
        return Task.FromResult(request.ApplyTo(localEditableTaxDataItem));
    }

    private async Task HandleSelectedTaxDataItemChanged(CryptoTransactionRecord newSelectedTaxDataItem)
    {
        if (selectedTaxDataItem != null)
        {
            // TODO: add your logic to save item changes here, the item which was selected (edited) is in selectedDataItem
            await Task.Delay(200); // simulates API call (saving changes itself)
            Console.WriteLine("Saving... " + selectedTaxDataItem);
        }

        selectedTaxDataItem = newSelectedTaxDataItem;
    }

    private async Task DeleteItem(CryptoTransactionRecordImport item)
    {
        localEditableDataItem.Remove(item);
        await recordsToImportGrid.RefreshDataAsync();
    }

    private async void UploadFile(InputFileChangeEventArgs e)
    {
        //Read file into stream
        using (var ms = e.File.OpenReadStream())
        {
            using (TextReader reader = new StreamReader(ms))
            {
                var readerText = await reader.ReadToEndAsync();
                using (var engine = new FileHelperAsyncEngine<CryptoTransactionRecordImport>())
                {

                    using (engine.BeginReadString(readerText))
                    {
                        //Load file data into grid
                        localEditableDataItem = new List<CryptoTransactionRecordImport>();
                        localEditableDataItem.AddRange(engine.ToList());
                        await recordsToImportGrid.RefreshDataAsync();
                        //_showLoader = true;
                        //StateHasChanged();
                        //foreach (var record in engine)
                        //{
                        //    _importedRecords.AddRange(Utils.Taxify.Flatten(record));
                        //}
                    }
                }
            }
        }

        //await ExportRecords(_importedRecords);
        //_showLoader = false;

        //StateHasChanged();

    }

    private async void CreateTaxRecords()
    {
        if (localEditableDataItem.Count > 0)
        {
            //Flatten
            localEditableTaxDataItem = new List<CryptoTransactionRecord>();
            _showLoader = true;
            await InvokeAsync(StateHasChanged);

            allExchangeRates = new List<ExchangeRate>();

            List<string> symbols = new();
            symbols.AddRange(localEditableDataItem.Select(x => x.CurrencyIn).Distinct());
            symbols.AddRange(localEditableDataItem.Select(x => x.CurrencyOut).Distinct());
            symbols.Add("aud");
            symbols.Add("usd");

            List<int> years = new();
            foreach (var symbol in symbols.Distinct())
            {
                if (!string.IsNullOrWhiteSpace(symbol))
                {

                    years.Add(localEditableDataItem?.Where(x => x.CurrencyIn == symbol).MinBy(x => x.TransactionDate)?.TransactionDate.Year ?? DateTime.UtcNow.Year);
                    years.Add(localEditableDataItem?.Where(x => x.CurrencyOut == symbol).MinBy(x => x.TransactionDate)?.TransactionDate.Year ?? DateTime.UtcNow.Year);
                    years.Add(localEditableDataItem?.Where(x => x.CurrencyIn == symbol).MaxBy(x => x.TransactionDate)?.TransactionDate.Year ?? DateTime.UtcNow.Year);
                    years.Add(localEditableDataItem?.Where(x => x.CurrencyOut == symbol).MaxBy(x => x.TransactionDate)?.TransactionDate.Year ?? DateTime.UtcNow.Year);

                    var startYear = years.Min();
                    var endYear = years.Max();

                    var response = await LoadCryptoExchangeRates(symbol.ToLower(), startYear, endYear);
                    if (response is not null && response.Count > 0)
                    {
                        allExchangeRates.AddRange(response);
                    }
                }
            }


            foreach (var record in localEditableDataItem)
            {
                var flattenRecords = Utils.Taxify.Flatten(record);
                var nonNFTExchangeRateEnrichedRecords = Utils.Taxify.AddExchangeRates(flattenRecords, allExchangeRates);
                var NFTExchangeRateEnrichedRecords = Utils.Taxify.AddNFTExchangeRates(flattenRecords, allExchangeRates);

                if(nonNFTExchangeRateEnrichedRecords is not null && nonNFTExchangeRateEnrichedRecords.Count > 0)
                {
                    localEditableTaxDataItem.AddRange(nonNFTExchangeRateEnrichedRecords);
                }

                if(NFTExchangeRateEnrichedRecords is not null && NFTExchangeRateEnrichedRecords.Count > 0)
                {
                    localEditableTaxDataItem.AddRange(NFTExchangeRateEnrichedRecords);
                }

            }

            if (localEditableTaxDataItem.Count > 0)
            {

                inTaxMode = true;
                if (taxRecordGrid is null)
                {
                    taxRecordGrid = new();
                    await InvokeAsync(StateHasChanged);
                }
                await taxRecordGrid.RefreshDataAsync();

            }



            _showLoader = false;
            await InvokeAsync(StateHasChanged);
        }
    }


    private async Task<List<ExchangeRate>> LoadCryptoExchangeRates(string symbol, int startYear = 2015, int endYear = 2022)
    {
        var currentIterationYear = startYear;
        List<ExchangeRate> cryptoExchangeRateCollection = new List<ExchangeRate>();
        while (currentIterationYear <= endYear)
        {
            try
            {

                var cryptoExchangeRates = await _HttpCLient.GetFromJsonAsync<List<ExchangeRate>>($"/config/{currentIterationYear}/{symbol}.json");
                if (cryptoExchangeRates is not null && cryptoExchangeRates.Count > 0)
                {
                    cryptoExchangeRateCollection.AddRange(cryptoExchangeRates);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"error loading file /config/{currentIterationYear}/{symbol}.json -> {ex.Message}");
            }
            finally
            {
                currentIterationYear++;
            }
        }

        return cryptoExchangeRateCollection;


    }

    private async Task ExportRecords(List<CryptoTaxRecords> records)
    {

        var engine = new FileHelperEngine<CryptoTaxRecords>();
        engine.HeaderText = engine.GetFileHeader();

        var outputString = engine.WriteString(records); // flattenedRecords);
        using (var outputStream = new MemoryStream(Encoding.UTF8.GetBytes(outputString)))
        {
            using (var streamRef = new DotNetStreamReference(stream: outputStream))
            {
                //download using JS
                string fName = string.Concat(DateTime.Now.ToString("yyyy-MM-dd"), "_", DateTime.Now.Ticks, ".csv");
                await JS.InvokeVoidAsync("downloadFile", fName, streamRef);
            }
        }
    }

    private void SetCustomLabelNames()
    {
        switch (selectedTradeAction)
        {
            case TradeAction.sell:
                {
                    InName = "Amount (sold)";
                    InCurrency = "Currency";
                    OutName = "Amount (bought)";
                    OutCurrency = "Currency";
                    break;
                }
            case TradeAction.buy:
                {
                    InName = "Amount (bought)";
                    InCurrency = "Currency";
                    OutName = string.Empty;
                    OutCurrency = string.Empty;
                    break;
                }
            case TradeAction.nftsell:
                {
                    InName = "NFT (quantity)";
                    InCurrency = "Name";
                    OutName = "Amount (worth)";
                    OutCurrency = "Currency";
                    break;
                }
            case TradeAction.nftbuy:
                {
                    InName = "Amount (bought)";
                    InCurrency = "Currency";
                    OutName = "NFT (quantity)";
                    OutCurrency = "Name";
                    break;
                }
            case TradeAction.stake:
                {
                    InName = "Amount (staked)";
                    InCurrency = "Currency";
                    OutName = string.Empty;
                    OutCurrency = string.Empty;
                    break;
                }
            case TradeAction.unstake:
                {
                    InName = string.Empty;
                    InCurrency = string.Empty;
                    OutName = "Amount (unstaked)";
                    OutCurrency = "Currency";
                    break;

                }
            case TradeAction.transfer:
                {
                    InName = "Transfer out (quantity)";
                    InCurrency = "Currency";
                    OutName = "Transfer in (quantity)";
                    OutCurrency = "Currency";
                    break;

                }

            default:
                {
                    InName = "Amount (in)";
                    InCurrency = "Currency (in)";
                    OutName = "Amount (out)";
                    OutCurrency = "Currency (out)";
                    break;

                }
        }
    }

    private async Task InitializeCryptoCollection(int endYear)
    {
        Console.WriteLine($"tax year: {endYear}");

        _showLoader = true;
        await InvokeAsync(StateHasChanged);
        myCryptoCollection = CryptoCollectionFactory.CreateCryptoCollection(localEditableTaxDataItem);
        //var consolidatedView = Utils.Taxify.DailyConsolidation(localEditableTaxDataItem);

        //Console.WriteLine($"consolidated count: {consolidatedView.Count()} vs original count: {localEditableDataItem.Count()}");

        TaxRecords.AddRange(Utils.Taxify.CreateCryptoTaxRecords(myCryptoCollection, localEditableTaxDataItem, allExchangeRates, endYear));
        if (TaxRecords.Count > 0)
        {
            var taxResultString = TaxRecords.Select(x =>
            {
                return $"on {x.SellDate} sold {x.SellAmount} of {x.Name}, bought at {x.BuyPrice} and sold for {x.SellPrice}, capital gains result {x.CapitalGainAmount}";
            }).ToList();

            if (taxResultString is not null && taxResultString.Count > 0)
            {
                TaxTransactions.AddRange(taxResultString);
            }
            _showLoader = false;
            

        }
        
        await InvokeAsync(StateHasChanged);
    }


}